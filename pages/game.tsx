import type {NextPage} from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Game.module.scss'
import {useRecoilValue} from "recoil";
import {SelectWords, UserStatus} from "../components/state";
import {useEffect, useRef, useState} from "react";
import {gsap, Linear} from "gsap";
import {map} from "../components/dbUtils";
import {createUnzip} from "zlib";
import {func} from "prop-types";
import mqtt from "mqtt";

const Home: NextPage = () => {
    const userState = useRecoilValue(UserStatus)
    const [adapterState, setAdapterState] = useState(true)
    const selectWord = useRecoilValue(SelectWords)
    const vec = useRef({x: 0, y: 0})
    const lineRef = useRef<HTMLDivElement | null>(null)
    const ani = useRef<gsap.core.Tween>()
    let client = useRef<mqtt.Client | null>(null)
    const adapterRef = useRef<HTMLDivElement | null>(null)
    useEffect(() => {
        const options = {
            clean: true,
            clientId: new Date().toString(),
            username: "admin",
            password: "public",
            reconnectPeriod: 1000,
            connectTimeout: 30 * 1000,
        };
        client.current = mqtt.connect("ws://zstu-interaction.art:8083/mqtt", options);
        client.current.on("error", error => {
            console.log("连接失败:", error);
        });
        gsap.set(lineRef.current, {transformOrigin: "50% 100%"})
        // gsap.to(lineRef.current, {rotate:45,yoyo:true,yoyoEase:Linear.easeIn})
        ani.current = gsap.fromTo(
            lineRef.current,
            {rotate: 45},
            {rotate: -45, yoyo: true, repeat: -1, duration: 3, ease: Linear.easeIn}
        );
        ani.current.eventCallback("onUpdate", () => {
            const a = map(ani.current!.time(), 3, 0, Math.PI * 1.25, Math.PI * 1.75, true)
            vec.current.x = Math.cos(a)
            vec.current.y = Math.sin(a)
        })
        return () => {
            ani.current?.kill()
        }
    }, [])

    function getVec(tween: gsap.core.Tween) {
        const a = map(tween.time(), 3, 0, Math.PI * 1.25, Math.PI * 1.75, true)
        vec.current.x = Math.cos(a) / 2
        vec.current.y = Math.sin(a) / 2
        return vec.current
    }

    function handleClick() {
        if (adapterState) {
            console.log("click")
            client.current?.publish("word/apply", JSON.stringify({
                id: userState.RFID,
                type: 0,
                vec: getVec(ani.current!)
            }))
            client.current?.publish("word/apply", JSON.stringify({
                id: userState.RFID,
                type: 1,
                vec: getVec(ani.current!)
            }))
            ani.current?.pause()
            setAdapterState(false)
            setTimeout(() => {
                setAdapterState(true)
                ani.current?.resume()
            }, 1500)
        }
    }

    return (
        <div className={styles.container} style={{backgroundImage: `url(${require("../public/bg.png").default.src})`}}>
            <Head>
                <title>Join New Act</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <div className={styles.enter}>
                <Image src={require("/public/game/enter.png")} alt={"entergame"}/>
            </div>
            <div className={styles.firstLine}>
                <div className={styles.front}>
                    <Image src={require("/public/game/jiaruxinde.png")} alt={"jiaru"} width={230}/>
                </div>
                <div className={styles.selected}>
                    <Image src={require("/public/game/selected1.png")} alt={"selected"}/>
                </div>
                <div className={styles.after}>
                    {`(${selectWord.word1})`}
                </div>
            </div>

            <div className={styles.secondLine}>
                <div className={styles.front}>
                    <Image src={require("/public/game/to.png")} alt={"jiaru"}/>

                </div>
                <div className={styles.after}>
                    {`(${selectWord.word2})`}
                    <div className={styles.selected2}>
                        <Image src={require("/public/game/selected2.png")} alt={"s2"}/>

                    </div>

                </div>
            </div>

            <div className={styles.illustrate}>
                <Image src={require("/public/game/Bigimg.png")} alt={"bigImg"}/>
            </div>

            <div className={styles.adapter} ref={adapterRef}
                 style={{filter: adapterState ? "grayscale(0%)" : "grayscale(100%)"}}>
                <div className={styles.sx}>

                    <Image src={require("/public/game/sx.png")} alt={"adapter"}/>
                </div>
                <div className={styles.light}>
                    <span ref={lineRef} className={styles.lightinner}>
                    <Image src={require("/public/game/line.png")} alt={"light"}/>
                    </span>
                </div>
                <div className={styles.button} onClick={() => {
                    handleClick()
                }}>
                    <Image src={require("/public/game/button.png")} alt={"s"}/>
                </div>
            </div>
        </div>
    )
}

export default Home
